//
// Generated file, do not edit! Created by nedtool 5.6 from tangle_message.msg.
//

#ifndef __TANGLE_MESSAGE_M_H
#define __TANGLE_MESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>tangle_message.msg:2</tt> by nedtool.
 * <pre>
 * message TangleMessage
 * {
 *     string id;
 *     int issuerNode;
 *     int sequence;
 *     int64_t issuingTime;
 * 
 *     string parent1;
 *     string parent2;
 * 
 *     bool requestMessageResponse = false;
 * 
 *     // metadata: needs to be reset on arrival of node
 *     int64_t processingTime;
 *     bool solid = false;
 * }
 * </pre>
 */
class TangleMessage : public ::omnetpp::cMessage
{
  protected:
    ::omnetpp::opp_string id;
    int issuerNode;
    int sequence;
    int64_t issuingTime;
    ::omnetpp::opp_string parent1;
    ::omnetpp::opp_string parent2;
    bool requestMessageResponse;
    int64_t processingTime;
    bool solid;

  private:
    void copy(const TangleMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const TangleMessage&);

  public:
    TangleMessage(const char *name=nullptr, short kind=0);
    TangleMessage(const TangleMessage& other);
    virtual ~TangleMessage();
    TangleMessage& operator=(const TangleMessage& other);
    virtual TangleMessage *dup() const override {return new TangleMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const char * getId() const;
    virtual void setId(const char * id);
    virtual int getIssuerNode() const;
    virtual void setIssuerNode(int issuerNode);
    virtual int getSequence() const;
    virtual void setSequence(int sequence);
    virtual int64_t getIssuingTime() const;
    virtual void setIssuingTime(int64_t issuingTime);
    virtual const char * getParent1() const;
    virtual void setParent1(const char * parent1);
    virtual const char * getParent2() const;
    virtual void setParent2(const char * parent2);
    virtual bool getRequestMessageResponse() const;
    virtual void setRequestMessageResponse(bool requestMessageResponse);
    virtual int64_t getProcessingTime() const;
    virtual void setProcessingTime(int64_t processingTime);
    virtual bool getSolid() const;
    virtual void setSolid(bool solid);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const TangleMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, TangleMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef __TANGLE_MESSAGE_M_H

